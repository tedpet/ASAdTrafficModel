{
    attributes = (
        {
            allowsNull = Y; 
            columnName = email; 
            name = email; 
            prototypeName = varchar255; 
        }, 
        {
            allowsNull = N; 
            columnName = firstname; 
            name = firstName; 
            prototypeName = varchar255; 
        }, 
        {
            columnName = fullname; 
            isReadOnly = Y; 
            name = fullName; 
            prototypeName = longText; 
            readFormat = "firstName || ' ' || lastName"; 
        }, 
        {allowsNull = N; name = id; prototypeName = id; }, 
        {columnName = isactive; name = isActive; prototypeName = intBoolean; }, 
        {
            allowsNull = Y; 
            columnName = lastname; 
            name = lastName; 
            prototypeName = varchar255; 
        }, 
        {
            allowsNull = N; 
            columnName = login; 
            name = login; 
            prototypeName = varchar255; 
        }, 
        {
            allowsNull = Y; 
            columnName = password; 
            name = password; 
            prototypeName = varchar255; 
        }, 
        {
            allowsNull = N; 
            columnName = securityid; 
            name = securityID; 
            prototypeName = id; 
        }, 
        {allowsNull = Y; columnName = title; name = title; prototypeName = longText; }
    ); 
    attributesUsedForLocking = (
        email, 
        firstName, 
        fullName, 
        id, 
        isActive, 
        lastName, 
        login, 
        password, 
        securityID, 
        title
    ); 
    className = "com.as.model.Person"; 
    classProperties = (
        email, 
        firstName, 
        fullName, 
        isActive, 
        lastName, 
        login, 
        password, 
        projectPersons, 
        security, 
        title
    ); 
    externalName = Person; 
    name = Person; 
    primaryKeyAttributes = (id); 
    relationships = (
        {
            destination = ProjectPerson; 
            isToMany = Y; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = personID; sourceAttribute = id; }); 
            name = projectPersons; 
        }, 
        {
            destination = Security; 
            isMandatory = Y; 
            isToMany = N; 
            joinSemantic = EOInnerJoin; 
            joins = ({destinationAttribute = id; sourceAttribute = securityID; }); 
            name = security; 
        }
    ); 
}
